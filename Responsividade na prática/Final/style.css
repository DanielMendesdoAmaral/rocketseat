/*

LAYOUT FIXO
px -> Pixels.

LAYOUT FLUÍDO
% -> Porcentagem.
auto -> Automático. Bom para heights e margins.
vh -> Viewport Height. Viewport é o que você vê em determinado positivo. 100vh é como se fosse 100% da viewport height.
vw - Viewport Width.

TEXTO FIXO (As medidas aqui citadas não aplciam-se somente a textos)
pt -> Pontos
1px = 0.75pt
16px = 12pt  (Textos tem por padrão, na maioria dos navegadores, 16px)

TEXTO FLUÍDO
em -> Multiplicado sempre pelo pai. Por exemplo: Uma "ul" com 16px. Se um "li" tem 1em, ele terá 16px. Se o "li" tem 2em, 32px.
rem -> Multiplicado pelo root. Root seria o "pai principal", o primeiro pai (que por padrão tem 16px).

BREAKPOINTS
São os pontos de quebra do layout. Aqueles pontos que você precisa dar uma alterada específica. Você pode vê-los pelo devtools dos navegadores, na parte que mostra os tamanhos dos dispositivos. Você pode ver também "a olho". Para acessá-los diretamente, use media queries. Preste também atenção na ordem em que você coloca os mediaqueries, pois um pode "tampar" o outro. Veja o item 3, pois tem muita informação lá.

FLEX E GRID
Eles também dispões elementos automaticamente. Use e abuse de flex-row, flex, grid, etc.

IMAGENS
Se tiver um dispositivo pequeno, você não precisa de uma imagem grande. Então, você pode definir no html, qual imagem colocar quando a tela tiver tal resolução. Por exemplo:

<picture>
  <source media="(min width: 768px)" srcset="link">
  <source media="(min width: 408px)" srcset="link">
</picture>

Aqui também teme xemplos de imagens responsivas. Copie.

*/

@import url("https://fonts.googleapis.com/css?family=Source+Sans+Pro");

* {
  box-sizing: border-box;
  margin: 0;
  padding: 0;
  outline: 0;
}

html {
  font-size: 62.5%; /*2- Vai ter 62.5% de 16px, ou seja, vai ter 10px. Se você mudar esta porcentagem, todos os outros elementos que estiverem com rem também será mudado, sendo assim uma ótima estratégia para responsividade.*/
}

body {
  font-size: 1.6rem; /*3- Vai ter 16px.*/
}

html,
body {
  height: 100vh;
  font-family: "Source Sans Pro";
  text-rendering: optimizelegibility;
  -webkit-font-smoothing: antialiased;
}

header {
  background-color: #7159c1;
}

header .container {
  display: flex;
  align-items: center;
  justify-content: space-between;
  width: 90%; /*1- Sempre vai ocupar 90%, mas, ele para de se adaptar quando submetido a uma largura superior a 980px*/
  max-width: 980px;
  margin: auto;
}

header img {
  width: 150px;
  margin-left: 20px;
  padding: 15px 0;
}

header nav ul {
  display: flex;
}

header nav ul li {
  list-style: none;
}

header nav ul li a {
  text-decoration: none;
  color: white;
  text-transform: uppercase;
  font-size: 1.4rem;
  padding: 24px;
  transition: all 250ms linear 0s;
}

header nav ul li a:hover {
  background: rgba(255,255,255, 0.15)
}

h2 {
  color: rgb(75, 75, 75);
  font-size: 3.6rem;
  line-height: 4.6rem;
}

h3 {
  color: rgb(75, 75, 75);
  font-size: 2.8rem;
  line-height: 3.8rem;
}

.button {
  display: inline-block;
  font-size: 1.6rem;
  font-weight: 600;
  color: rgb(255, 255, 255);
  background-color: rgb(113, 89, 193);
  margin: 15px 0px 0px;
  padding: 12px 30px;
  text-decoration: none;
  border-radius: 5px;
  transition: all 150ms linear 0s;
}

.button:hover {
  opacity: 0.9;
}


/*=============== 
HERO
==================*/
section.hero {
  margin: 80px 0;
}

section.hero .container {
  max-width: 980px;
  margin: auto;
  width: 90%;
  display: flex;
}

section.hero p {
  color: rgb(154, 142, 191);
  font-size: 1.8rem;
  line-height: 3.2rem;
  margin: 10px 0px 0px;
}


/*=============== 
MAIN
==================*/
main {
  margin-bottom: 80px;
}


/*=============== 
CARDS
==================*/
.cards {
  max-width: 980px;
  margin: auto;
  width: 90%;
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(250px, 1fr)); /*5- A grid terá quantas colunas couber (auto-fit). Ela sempre terá uma largura mínima de 250px, e ela não terá um máximo, o máximo dela é ser sempre flexível (obviamente, respeitando as widths e max-widths acima).*/
  grid-gap: 20px;
}

.text--medium {
  font-size: 1.6rem;
  line-height: 2.6rem;
  font-weight: 400;
  color: #ecf0f1;
}

.card {
  display: flex;
  flex-direction: column;
  background-color: #7159c1;
  cursor: pointer;
  transition: all 0.3s ease 0s;

}

.card:hover {
  transform: translateY(-7px);
}

.image {
  width: 100%;
  padding-top: 56.25%; /* 16:9 */
  overflow: hidden;
  position: relative;
}

.image img {
  width: 100%;
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
}

.content {
  margin: 20px;
}

.title {
  margin-bottom: 20px;
}

.info {
  display: flex;
  align-self: end;
  align-items: center;
}

.price {
  margin-left: auto;
  padding: 5px 20px;
  border-radius: 20px;
  background-color: #7159c1;
  filter: brightness(90%);
}

/*=============== 
MODAL
==================*/
.modal-overlay {
  display: flex;
  align-items: center;
  justify-content: center;
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  z-index: 5;
  background-color: rgba(0, 0, 0, 0.6);
  opacity: 0;
  visibility: hidden;
}
.modal-overlay.active {
  opacity: 1;
  visibility: visible;
}
.modal {
  display: flex;
  align-items: center;
  justify-content: center;
  position: relative;
  background-color: #fff;
  width: 800px;
  height: 400px;
  margin: 0 auto;
  padding: 10px;
  border-radius: 3px;
  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
  opacity: 0;
  overflow-y: auto;
  visibility: hidden;
  transition: all 0.6s cubic-bezier(0.55, 0, 0.1, 1);
  transform: scale(1.2);
}
.modal .close-modal {
  position: absolute;
  cursor: pointer;
  top: 5px;
  right: 15px;
  opacity: 0;
  transition: opacity 0.6s cubic-bezier(0.55, 0, 0.1, 1), transform 0.6s cubic-bezier(0.55, 0, 0.1, 1);
  transition-delay: 0.3s;
}
.modal .close-modal svg {
  width: 18px;
  height: 18px;
}
.modal .modal-content {
  opacity: 0;
  transition: opacity 0.6s cubic-bezier(0.55, 0, 0.1, 1);
  transition-delay: 0.3s;
}
.modal.active {
  visibility: visible;
  opacity: 1;
  transform: scale(1);
}
.modal.active .modal-content {
  opacity: 1;
}
.modal.active .close-modal {
  transform: translateY(10px);
  opacity: 1;
}

.video-background {
  position: fixed;
  top: 0;
  right: 0;
  bottom: 0;
  left: 0;
  z-index: -99;
  background-color: white;
}
.video-foreground,
.video-background iframe {
  position: absolute;
  top: 50%;
  left: 50%;
  width: 100%;
  height: 90%;
  transform: translate(-50%, -50%);
}


/*=============== 
FORM
==================*/
#form {
  width:100%;

  background: #7159c1;
  padding: 80px 0;
  margin:0;

  display:flex;
  align-items: center;
  justify-content: center;
}

#form form {
  max-width: 980px;
  width: 90%;
  background: white;
  padding: 40px;
  box-shadow: 0px 2px 2px 2px rgba(0, 0, 0, 0.15), 
    0px 10px 20px -10px rgba(0, 0, 0, 0.1)
}

#form h3 {
  margin-bottom: 30px
}

#form form label {
  display: none;
}

.form-group {
  display: flex;
  flex-direction: row;
}

.form-group label.right-inline {
  text-align: right;  
  padding-right: 8px;
  padding-left: 10px;
  width: auto;
}

.form-group .input-control {
  flex: 1 1;
  display: block;
  margin: -4px 8px 10px;
  padding: 12px;
  font-size: 1.6rem;
}

#form .button {
  margin: 20px 8px 10px;
}


/*MEDIA QUERIES*/

@media (max-width: 768px) { /*3- Dispositivos que tiverem 768px ou menos de largura terão essa configuraão. Você pode adicionar algumas outras configurações por exemplo: 
  @media (max-width: 768px) and (min-width: 700px) -> isto faz com que todas as telas entre essas configurações recebam esses estilos.
  Você também pode colocar print que é para impressoras, etc.
*/
  html { 
    font-size: 50%;
  }
}

@media (max-width: 630px) {
  .hero .container {
    flex-direction: column; /*6- Tava um do lado do outro, só que por estar estyranho, deixamos um embaixo do outro.*/
    text-align: center;
  }

  .hero .container img {
    order: -1; /*7- Inverte. Estava embaixo, ficou em cima.*/
  }

  .form-group {
    display: block; /*8- Faz com que cada elemento fique um embaixo do outro.*/
  }
}

@media (max-width: 540px) {
  nav {
    display: none;
  }

  .one, /*9- Esse é o "hamburguer". Só aperece para essa resolução.*/
  .two,
  .three {
    background-color: #fff;
    height: 5px;
    width: 100%;
    margin: 6px auto;
    transition-duration: 0.3s;
  }

  .menu-toggle { 
    width: 40px;
    height: 30px;
    margin-right: 20px;
  }

  .menu-section.on { /*10- Essa configuração aparece quando o menu ficar on, ou seja, quando for clicado.*/
    position: absolute;
    top: 0;
    left: 0;
    background-color: #7159c1;
    width: 100vw;
    height: 100vh;
    z-index: 10;
    display: flex;
    justify-content: center;
    align-items: center;
  }

  .menu-section.on nav {
    display: block;
  }

  .menu-section.on .menu-toggle {
    position: absolute;
    right: 25px;
    top: 15px;
  }

  .menu-section.on .menu-toggle .one { /*11- A primeira barrinha do hamburguer, quando for clicada. */
    transform: rotate(45deg) translate(7px, 7px); /*Para parecer um x, rotaciona a primeira barrinha, e por isso, ela sai um pouco do eixo. Ai arrumamos 7px no eixo x e 7px no eixo y.*/
  }

  .menu-section.on .menu-toggle .two { /*12- A segunda barrinha do hamburguer, quando for clicada. */
    opacity: 0;; /*Para parecer um x, deixamos invisível. Não de display none, pois depois queremos fazer transição.*/
  }

  .menu-section.on .menu-toggle .three { /*13- A terceira barrinha do hamburguer, quando for clicada. */
    transform: rotate(-45deg) translate(8px, -9px); /*Para parecer um x, é o inverso da primeira barrinha.*/
  }

  .menu-section.on nav ul {
    text-align: center;
    display: block;
  }

  .menu-section.on nav ul a {
    transition-duration: 0.5s;
    font-size: 3rem;
    line-height: 4rem;
    display: block;
  }
}

@media (max-width: 320px) {
  #form h3 {
    font-size: 2rem;
  }
}